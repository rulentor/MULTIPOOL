import type { NextPage } from 'next'
import React, { FC, useMemo, useState, useRef } from 'react'

import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
// PrimeReact
import { InputText } from 'primereact/inputtext'
import { Button } from 'primereact/button'
import { Toast } from 'primereact/toast'
import { TabMenu } from 'primereact/tabmenu'
import { Card } from 'primereact/card'
import PrimeReact from 'primereact/api'


// Default styles that can be overridden by your app
require('@solana/wallet-adapter-react-ui/styles.css')

import { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react'
import { WalletAdapterNetwork } from '@solana/wallet-adapter-base'
import {
    LedgerWalletAdapter,
    PhantomWalletAdapter,
    SlopeWalletAdapter,
    SolflareWalletAdapter,
    SolletExtensionWalletAdapter,
    SolletWalletAdapter,
    TorusWalletAdapter,
} from '@solana/wallet-adapter-wallets'
import {
    WalletModalProvider,
    WalletDisconnectButton,
    WalletMultiButton
} from '@solana/wallet-adapter-react-ui'
import { clusterApiUrl } from '@solana/web3.js'

//export const Home: FC = () => {
const Home: NextPage = () => {
    const [text, setText] = useState('')
    const toastRef = useRef()
    // active ripple effect
    PrimeReact.ripple = true
	const [activeIndex, setActiveIndex] = useState(3)

    const items = [
        {label: 'Home', icon: 'pi pi-fw pi-home'},
        {label: 'Calendar', icon: 'pi pi-fw pi-calendar'},
        {label: 'Edit', icon: 'pi pi-fw pi-pencil'},
        {label: 'Documentation', icon: 'pi pi-fw pi-file'},
        {label: 'Settings', icon: 'pi pi-fw pi-cog'}
    ]

////////////////////////////
    // The network can be set to 'devnet', 'testnet', or 'mainnet-beta'.
    const network = WalletAdapterNetwork.Devnet;

    // You can also provide a custom RPC endpoint.
    const endpoint = useMemo(() => clusterApiUrl(network), [network]);

    // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking and lazy loading --
    // Only the wallets you configure here will be compiled into your application, and only the dependencies
    // of wallets that your users connect to will be loaded.
    const wallets = useMemo(
        () => [
            new PhantomWalletAdapter(),
            new SlopeWalletAdapter(),
            new SolflareWalletAdapter({ network }),
            new TorusWalletAdapter(),
            new LedgerWalletAdapter(),
            new SolletWalletAdapter({ network }),
            new SolletExtensionWalletAdapter({ network }),
        ],
        [network]
    );

    const headerCard = (
        <img alt="Card" src="header.png" onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} />
    )
    const footerCard = (
        <span>
        <ConnectionProvider endpoint={endpoint}>
            <WalletProvider wallets={wallets} autoConnect>
                <WalletModalProvider>
                    <WalletMultiButton />
                    <WalletDisconnectButton />
                    { /* Your app's components go here, nested within the context providers. */ }
                </WalletModalProvider>
            </WalletProvider>
        </ConnectionProvider>
        </span>
    )

    const onFormSubmit = (e) => {
        if (text) {
            toastRef.current.show({ severity: 'info', summary: text, life: 3000 });
        }

        // clear
        setText('');

        e.preventDefault();
    }

    return (
	<div className="App">
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
        <Toast ref={toastRef} />
             <div className="card">
                <h5>Default</h5>
                <TabMenu model={items} />
            </div>
   
        <header className="App-header">
          <img src="logo.svg" className="App-logo" alt="logo" />
        </header>

      <form className="p-d-flex p-jc-center p-mt-6" onSubmit={onFormSubmit}>
        <InputText value={text} onChange={(e) => setText(e.target.value)} />
        <Button type="submit" label="Submit" icon="pi pi-check" className="p-ml-2" />
      </form>	  
      <main className={styles.main}>
            <Card title="Multypool" subTitle="Subtitle" style={{ width: '25em' }} footer={footerCard} header={headerCard}>
                <p className="m-0" style={{lineHeight: '1.5'}}>Multypool tech. 
                    </p>
            </Card> 
        <div className={styles.grid}>

        </div>
      </main>
      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Сделано{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Noop" width={72} height={16} />
          </span>
        </a>
      </footer>


            <style jsx>{`             
.App {
    text-align: center;
  }
  
  .App-logo {
    height: 40vmin;
    pointer-events: none;
  }
  
  @media (prefers-reduced-motion: no-preference) {
    .App-logo {
      animation: App-logo-spin infinite 20s linear;
    }
  }
  
  .App-header {
    background-color: #282c34;
    height: 60%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    font-size: calc(10px + 2vmin);
    color: white;
  }
  
  .App-link {
    color: #61dafb;
  }
  
  @keyframes App-logo-spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }
  
`}</style>	  
    </div>
	</div>
    )
}

export default Home
