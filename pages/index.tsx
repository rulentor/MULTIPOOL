import type { NextPage } from 'next'
import React, { FC, useMemo, useState, useRef } from 'react'

import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
// PrimeReact
import { InputText } from 'primereact/inputtext'
import { Button } from 'primereact/button'
import { Toast } from 'primereact/toast'
import { TabMenu } from 'primereact/tabmenu'
import { Card } from 'primereact/card'
import PrimeReact from 'primereact/api'


// Default styles that can be overridden by your app
require('@solana/wallet-adapter-react-ui/styles.css')

import { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react'
import { WalletAdapterNetwork } from '@solana/wallet-adapter-base'
import {
    LedgerWalletAdapter,
    PhantomWalletAdapter,
    SlopeWalletAdapter,
    SolflareWalletAdapter,
    SolletExtensionWalletAdapter,
    SolletWalletAdapter,
    TorusWalletAdapter,
} from '@solana/wallet-adapter-wallets'
import {
    WalletModalProvider,
    WalletDisconnectButton,
    WalletMultiButton
} from '@solana/wallet-adapter-react-ui'
import { clusterApiUrl } from '@solana/web3.js'

//export const Home: FC = () => {
const Home: NextPage = () => {
    const [text, setText] = useState('')
    const toastRef = useRef()
    // active ripple effect
    PrimeReact.ripple = true
	const [activeIndex, setActiveIndex] = useState(3)

    const items = [
        {label: 'Home', icon: 'pi pi-fw pi-home'},
        {label: 'P2P Trading', icon: 'pi pi-fw'},
        {label: 'Buy Crypto', icon: 'pi pi-fw'},
        {label: 'Staking Pool', icon: 'pi pi-fw'},
        {label: 'Webcasts', icon: 'pi pi-fw'},
		{label: 'About', icon: 'pi pi-fw'}
   ]

////////////////////////////
    // The network can be set to 'devnet', 'testnet', or 'mainnet-beta'.
    const network = WalletAdapterNetwork.Devnet;

    // You can also provide a custom RPC endpoint.
    const endpoint = useMemo(() => clusterApiUrl(network), [network]);

    const wallets = useMemo(
        () => [
            new PhantomWalletAdapter(),
            new SlopeWalletAdapter(),
            new SolflareWalletAdapter({ network }),
            new TorusWalletAdapter(),
            new LedgerWalletAdapter(),
            new SolletWalletAdapter({ network }),
            new SolletExtensionWalletAdapter({ network }),
        ],
        [network]
    );

    const headerCard = (
	    <>
	    <p className="m-0" style={{lineHeight: '1.5'}}>
		  Multipool tech. 
        </p>
        <img alt="Card" src="header.png" onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} />
		</>
    )
    const footerCard = (
        <span>
        <ConnectionProvider endpoint={endpoint}>
            <WalletProvider wallets={wallets} autoConnect>
                <WalletModalProvider>
                    <WalletMultiButton />
                    <WalletDisconnectButton />
                    { /* Your app's components go here, nested within the context providers. */ }
                </WalletModalProvider>
            </WalletProvider>
        </ConnectionProvider>
        </span>
    )

    const onFormSubmit = (e) => {
        if (text) {
            toastRef.current.show({ severity: 'info', summary: text, life: 3000 });
        }

        // clear
        setText('');

        e.preventDefault();
    }

    return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
        <Toast ref={toastRef} />
            <Card>
                <TabMenu model={items} />
            </Card>
      <main className={styles.main}>  
		<div class="grid grid-nogutter surface-section text-800">
			<div class="col-8 md:col-4 p-6 text-center md:text-left flex align-items-center ">
				<section>
					<span class="block text-6xl font-bold mb-1">Make Investing Simple way</span>
					<div class="text-6xl text-primary font-bold mb-3">MULTIPOOL service</div>
					<p class="mt-0 mb-4 text-700 line-height-3"></p>
					
        <ConnectionProvider endpoint={endpoint}>
            <WalletProvider wallets={wallets} autoConnect>
                <WalletModalProvider>
                    <WalletMultiButton />
                    <WalletDisconnectButton />
                    { /* Your app's components go here, nested within the context providers. */ }
                </WalletModalProvider>
            </WalletProvider>
        </ConnectionProvider>
				</section>
			</div>
			<div class="col-12 md:col-6 overflow-hidden">
				<img src="header.png" alt="Image" class="md:ml-auto block md:h-full" />
			</div>
		</div>
      </main>
      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Сделано{' Multipool '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Noop" width={72} height={16} />
          </span>
        </a>
      </footer>
	  <style jsx>{`
	      .App {
            text-align: center;
          }
		  .App-header {
			background-color: #282c34;
			height: 60%;
			display: flex;
			flex-direction: column;
			align-items: center;
			justify-content: center;
			font-size: calc(10px + 2vmin);
			color: white;
		  }
		  img {
		    clip-path: polygon(8% 0, 100% 0%, 100% 100%, 0 100%)
		  }
      `}</style>	  
	</div>
    )
}

export default Home
